import laspy
import open3d as o3d
import numpy as np
import matplotlib.pyplot as plt


class PointCloudVisualizer:
    def __init__(self, file_path):
        """
        Initializes the PointCloudVisualizer class.

        Args:
            file_path (str): The path to the .las file.
        """
        self.file_path = file_path
        self.point_cloud = None
        self.point_classes = None

    def load_las_file(self):
        """
        Loads the .las file and extracts the point cloud data and class information.
        """
        # Open the .las file
        las = laspy.read(self.file_path)

        # Extract point coordinates (X, Y, Z)
        points = np.vstack((las.x, las.y, las.z)).transpose()

        # Extract point classes
        point_classes = las.classification

        # Store the points and classes
        self.point_cloud = points
        self.point_classes = point_classes

    def get_color_map(self):
        """
        Generates a colormap for each point class.

        Returns:
            np.ndarray: An array of RGB colors for each point.
        """
        # Unique classes
        unique_classes = np.unique(self.point_classes)

        # Generate a colormap (using matplotlib's 'tab20' for distinct colors)
        cmap = plt.get_cmap('tab20', len(unique_classes))

        # Create a dictionary to map each class to a color
        class_color_map = {cls: cmap(i)[:3] for i, cls in enumerate(unique_classes)}

        # Assign colors to each point based on its class
        colors = np.array([class_color_map[cls] for cls in self.point_classes])

        return colors

    def visualize(self):
        """
        Visualizes the point cloud in an interactive mode using Open3D with color coding for point classes.
        """
        if self.point_cloud is None or self.point_classes is None:
            raise ValueError("No point cloud loaded. Please run `load_las_file()` first.")

        # Create an Open3D PointCloud object
        o3d_cloud = o3d.geometry.PointCloud()

        # Convert the NumPy array of points to Open3D format
        o3d_cloud.points = o3d.utility.Vector3dVector(self.point_cloud)

        # Get colors based on point classes
        colors = self.get_color_map()

        # Assign the colors to the Open3D point cloud
        o3d_cloud.colors = o3d.utility.Vector3dVector(colors)

        # Visualize the point cloud
        o3d.visualization.draw_geometries([o3d_cloud])



if __name__ == "__main__":
    # Example Usage:
    # Create the visualizer object

    las_file_path = ""


    visualizer = PointCloudVisualizer(las_file_path)

    # Load the .las file
    visualizer.load_las_file()

    # Visualize the point cloud
    visualizer.visualize()
